import Head from "next/head";
import type { GetServerSidePropsContext, NextPage } from "next";
import { authOptions } from "~/pages/api/auth/[...nextauth]";

import { shallow } from "zustand/shallow";
import { useCallback, useEffect } from "react";

import { ActionButtons } from "~/components/ActionButtons";
import { useSpeechRecognition } from "~/util/speechRecognition";
import { Book, BookOpen, SoundOff, SoundOn, Spinner } from "~/components/icons";
import { TwitchMessageList } from "~/components/twitchMessageList";
import { PromptQueue } from "~/components/PromptQueue";
import { Subtitles } from "~/components/Subtitles";
import { ReactPrompt } from "~/components/ReactPrompt";
import { useAskTed } from "~/util/useAskTed";
import { extractTwitterId, useTwitterStore } from "~/util/twitter";
import { type PromptQueueItem, useTedStore } from "~/util/ted";
import { getServerSession } from "next-auth/next";
import type { Session } from "next-auth";
import { Navbar } from "~/components/Navbar";

export const CHECK_PROMPT_STATE_INTERVAL = 130000; // 130s

const ControlPanel: NextPage<{ user: Session["user"] }> = ({ user }) => {
  const { askTed, pause, tedResponse } = useAskTed();
  const {
    questionType,
    isTedProcessing,
    setQuestionType,
    setIsTedProcessing,
    addToPromptQueue,
    cleanupPromptQueueState,
    deleteFromPromptQueue,
  } = useTedStore((state) => state);
  const { getTweets } = useTwitterStore(
    (state) => ({ getTweets: state.getTweets }),
    shallow
  );
  const { isMicOn, onToggleSpeechRecognition } = useSpeechRecognition();

  const onChatMessageClick = useCallback(
    (message: string, username: string) => {
      try {
        const tweetId = extractTwitterId(message);

        getTweets([tweetId]).catch((err) =>
          console.error("getTweets failed.", err)
        );
      } catch (err) {
        console.info("It's not a tweet. Pushing the message to the P.Queue.");

        addToPromptQueue({
          message,
          status: "new",
          authorName: username,
          readTheQuestion: true,
        });
      }
    },
    [addToPromptQueue, getTweets]
  );

  const onPromptQueueItemClick = (
    idx: number,
    status: PromptQueueItem["status"]
  ) => {
    if (status === "processing") {
      pause();
      setIsTedProcessing(false);
    }

    deleteFromPromptQueue(idx);
  };

  useEffect(() => {
    // Clean up promptQueue and inject a random question
    setInterval(cleanupPromptQueueState, CHECK_PROMPT_STATE_INTERVAL);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <>
      <Head>
        <title>Ai Streamer - Control Panel</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start bg-gradient-to-b from-[#2e026d] to-[#15162c] py-8 px-4">
        <Navbar status="authenticated" user={user} title="Control Panel" />

        <div className="container mt-5 flex flex-col items-center justify-center gap-12">
          <div className="grid min-h-[500px] grid-cols-1 gap-4 sm:grid-cols-3 md:grid-cols-2 lg:grid-cols-3">
            <div className="border-grey flex min-h-[500px] min-w-[400px] flex-col rounded border p-5 text-white">
              <div className="flex flex-row items-center justify-center">
                <button
                  onClick={onToggleSpeechRecognition}
                  className={`mr-2 flex min-w-[150px] justify-center p-2 ${
                    isMicOn ? "bg-pink-700" : "bg-pink-900"
                  }`}
                >
                  {isMicOn ? <SoundOn /> : <SoundOff />}
                </button>

                <button
                  onClick={() =>
                    setQuestionType(
                      questionType === "default" ? "knowledge" : "default"
                    )
                  }
                  className={`mr-2 flex min-w-[150px] justify-center p-2 ${
                    questionType === "knowledge"
                      ? "bg-amber-700"
                      : "bg-amber-900"
                  }`}
                >
                  {questionType === "default" ? <Book /> : <BookOpen />}
                </button>
              </div>

              <PromptQueue
                askTed={askTed}
                onPromptQueueItemClick={onPromptQueueItemClick}
              />

              {isTedProcessing && <Spinner className="mt-5" />}
            </div>

            <div className="border-grey flex min-h-[500px] min-w-[300px] flex-col rounded border p-5 text-white">
              <ActionButtons />
              <ReactPrompt askTed={askTed} />
            </div>

            <div className="border-grey flex min-h-[500px] flex-col rounded border p-5 text-white">
              <h1 className="text-xl">Messages from Twitch</h1>

              <TwitchMessageList onMessageClick={onChatMessageClick} />
            </div>
          </div>

          <Subtitles message={tedResponse} />
        </div>
      </main>
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      user: session.user,
    },
  };
}

export default ControlPanel;
