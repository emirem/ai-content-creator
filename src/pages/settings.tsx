import Head from "next/head";
import type { Session } from "next-auth";
import { getServerSession } from "next-auth/next";
import type { GetServerSidePropsContext, NextPage } from "next";
import { type ChangeEvent, type FormEvent, useState } from "react";

import { Navbar } from "~/components/Navbar";
import { Spinner } from "~/components/icons";
import { getModelContext } from "~/util/modelContext";
import type { ModelContext } from "./api/updateAiContext";
import type { ChatCompletionRequestMessage } from "openai";
import { authOptions } from "~/pages/api/auth/[...nextauth]";

const Settings: NextPage<{
  user: Session["user"];
  aiContext: ModelContext[];
}> = ({ user, aiContext }) => {
  const [isSaving, setIsSaving] = useState(false);
  const [ctxValue, setCtxValue] =
    useState<ChatCompletionRequestMessage[]>(aiContext);

  const onSubmit = async () => {
    setIsSaving(true);
    try {
      await fetch("/api/updateAiContext", {
        method: "POST",
        body: JSON.stringify({ context: ctxValue }),
      });
      setIsSaving(false);
    } catch (err) {
      console.error(err);
      setIsSaving(false);
    }
  };

  const onContextValueChange = (value: string, itemIdx: number) => {
    const newState = ctxValue.map((item, idx) => {
      if (itemIdx === idx) {
        return {
          ...item,
          content: value,
        };
      }

      return item;
    });

    setCtxValue(newState);
  };

  return (
    <>
      <Head>
        <title>Ai Streamer - Settings</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start bg-gradient-to-b from-[#2e026d] to-[#15162c] py-8 px-4">
        <Navbar status="authenticated" user={user} title="Settings" />
        <div className="container mt-5 flex flex-col items-center justify-center gap-12">
          <form
            onSubmit={(event: FormEvent<HTMLFormElement>) => {
              event.preventDefault();

              onSubmit().catch((err) => console.error("onSubmit", err));
            }}
            className="flex w-full flex-col justify-center gap-4"
          >
            {ctxValue.map(({ role, content }, idx) => {
              return (
                <div className="mt-5 flex flex-col" key={idx}>
                  <label className="font-bold capitalize text-white">
                    {role}
                  </label>
                  <textarea
                    value={content}
                    name="system"
                    placeholder="Ai Context"
                    rows={role === "system" ? 20 : undefined}
                    className="borer-[#15162c] custom-scrollbar border-b bg-transparent py-2 pr-1 text-lg leading-loose text-white outline-none"
                    onChange={(event: ChangeEvent<HTMLTextAreaElement>) =>
                      onContextValueChange(event.target.value, idx)
                    }
                  />
                </div>
              );
            })}

            <button
              type="submit"
              disabled={isSaving}
              className="flex flex-row items-center self-center p-2 text-white hover:bg-[#0e0f24]"
            >
              <span className="mr-2">Save</span>
              {isSaving && <Spinner />}
            </button>
          </form>
        </div>
      </main>
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  const data = await getModelContext(session.user!.id);

  return {
    props: {
      aiContext: data,
      user: session.user,
    },
  };
}

export default Settings;
